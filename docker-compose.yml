version: "3.7"
services:
  caddy:
    image: caddy
    container_name: caddy
    restart: unless-stopped
    hostname: caddy
    ports:
      - "80:80"
      - "443:443"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - DOMAIN
      - HETZNER_API_TOKEN
      - BASICAUTH_USER
      - BASICAUTH_PASS
    volumes:
      - ${CONFIG}/caddy/caddy:/usr/bin/caddy:ro
      - ${CONFIG}/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ${DATA}/caddy/data:/data
      - ${DATA}/caddy/config:/config
      - ${CONFIG}/nextcloud/zzz-custom.ini:/usr/local/etc/php/conf.d/zzz-custom.ini:ro
      - ${DATA}/nextcloud:/var/www/html
    links:
      - nextcloud

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    hostname: dozzle
    environment:
      # DOZZLE_LEVEL: debug
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  homer:
    image: b4bz/homer:latest
    container_name: homer
    restart: unless-stopped
    hostname: homer
    environment:
      - TZ=${TZ}
    volumes:
      - ${CONFIG}/homer/:/www/assets:ro

  postgres:
    image: postgres:alpine
    hostname: postgres
    container_name: postgres
    restart: unless-stopped
    volumes:
      - ${DATA}/postgres:/var/lib/postgresql/data
      - ${CONFIG}/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "miniflux"] # Last db in the list
      interval: 10s
      start_period: 30s
    environment:
      - POSTGRES_MULTIPLE_DATABASES=nextcloud,planka,koel,miniflux
      - POSTGRES_USER=${USER}
      - POSTGRES_PASSWORD=${PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=trust

  redis:
    restart: unless-stopped
    image: redis:alpine
    container_name: redis
    hostname: redis

  nextcloud:
    restart: unless-stopped
    image: nextcloud:fpm-alpine
    container_name: nextcloud
    hostname: nextcloud
    depends_on:
      - redis
      - postgres
    environment:
      - NEXTCLOUD_ADMIN_USER=arvigeus
      - NEXTCLOUD_ADMIN_PASSWORD=StrongAndComplicatedPassword
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=nextcloud
      - NEXTCLOUD_TRUSTED_DOMAINS=cloud.${DOMAIN} caddy
      - REDIS_HOST=redis
    volumes:
      - ${CONFIG}/nextcloud/zzz-custom.ini:/usr/local/etc/php/conf.d/zzz-custom.ini:ro
      - ${DATA}/nextcloud:/var/www/html
  # DAV: https://cloud.arvigeus.one/remote.php/webdav

  nextcloud-cron:
    restart: unless-stopped
    image: nextcloud:fpm-alpine
    container_name: nextcloud-cron
    depends_on:
      - redis
      - postgres
    entrypoint: /cron.sh
    volumes:
      - ${DATA}/nextcloud:/var/www/html

  filestash:
    image: machines/filestash
    container_name: filestash
    restart: always
    hostname: filestash
    environment:
      - APPLICATION_URL=files.arvigeus.one
      - GDRIVE_CLIENT_ID=${GDRIVE_CLIENT_ID}
      - GDRIVE_CLIENT_SECRET=${GDRIVE_CLIENT_SECRET}
      - DROPBOX_CLIENT_ID=${DROPBOX_CLIENT_ID}
      - ONLYOFFICE_URL=http://onlyoffice
    volumes:
      - ${DATA}/filestash:/app/data/state

  onlyoffice:
    image: onlyoffice/documentserver
    container_name: filestash_oods
    hostname: onlyoffice
    restart: always

  kavita:
    image: kizaing/kavita:latest
    container_name: kavita
    restart: unless-stopped
    hostname: kavita
    volumes:
      - ${DATA}/kavita:/kavita/config
      - ${MEDIA}:/media
    depends_on:
      - nextcloud

  planka:
    image: meltyshev/planka:latest
    container_name: planka
    hostname: planka
    command: >
      bash -c
        "for i in `seq 1 30`; do
          ./start.sh &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 seconds...\";
          sleep 5;
        done; (exit $$s)"
    restart: unless-stopped
    volumes:
      - ${DATA}/planka/user-avatars:/app/public/user-avatars
      - ${DATA}/planka/project-background-images:/app/public/project-background-images
      - ${DATA}/planka/attachments:/app/public/attachments
    environment:
      - BASE_URL=https://kanban.${DOMAIN}
      - TRUST_PROXY=0
      - DATABASE_URL=postgresql://planka:planka@postgres/planka
      - SECRET_KEY=${PLANKA_SECRET_KEY}
    depends_on:
      - postgres

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    hostname: vaultwarden
    restart: unless-stopped
    environment:
      - SIGNUPS_ALLOWED=false # Change to false after first login
      - INVITATIONS_ALLOWED=true # Send invitation using admin page
      - WEBSOCKET_ENABLED=true
      - DOMAIN=https://vault.$DOMAIN
      - LOG_FILE=/var/log/docker/bitwarden.log
      - SMTP_SSL=$SMTP_SSL
      - SMTP_EXPLICIT_TLS=$SMTP_EXPLICIT_TLS
      - SMTP_HOST=$SMTP_HOST
      - SMTP_PORT=$SMTP_PORT
      - SMTP_FROM=$SMTP_FROM
      - SMTP_USERNAME=$SMTP_USERNAME
      - SMTP_PASSWORD=$SMTP_PASSWORD
    volumes:
      - ${DATA}/vaultwarden/:/data/
      - /var/log/docker:/var/log/docker
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  ## To restore database from backup:
  # docker exec -it bitwarden bash
  # mv /data/db.sqlite3 /data/db.sqlite3.back
  # sqlite3 /data/db.sqlite3 ".restore '/data/db-backup/select_db_file'"
  # exit
  # bw_backup:
  #   container_name: bw_backup
  #   image: bruceforce/bw_backup
  #   restart: on-failure
  #   security_opt:
  #     - no-new-privileges:true
  #   init: true
  #   depends_on:
  #     - bitwarden
  #   volumes:
  #     - ${DATA}/vaultwarden:/data
  #     - ${BACKUP}/backup_databases/bitwarden:/dbbackup
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   environment:
  #     - DB_FILE=/data/db.sqlite3
  #     - BACKUP_FILE=/dbbackup/backup.sqlite3
  #     - CRON_TIME=30 4 * * *
  #     - TIMESTAMP=true
  #     - UID=0
  #     - GID=0

  mealie:
    image: hkotel/mealie:latest
    container_name: mealie
    hostname: mealie
    restart: unless-stopped
    environment:
      PUID: ${PGID}
      PGID: ${PUID}
      TZ: ${TZ}
      # Default Recipe Settings
      RECIPE_PUBLIC: "true"
      RECIPE_SHOW_NUTRITION: "true"
      RECIPE_SHOW_ASSETS: "true"
      RECIPE_LANDSCAPE_VIEW: "true"
      RECIPE_DISABLE_COMMENTS: "true"
      RECIPE_DISABLE_AMOUNT: "false"
      DEFAULT_EMAIL: ${EMAIL}
      DEFAULT_PASSWORD: ${PASSWORD}
      # Gunicorn
      WEB_CONCURRENCY: 2
      # WORKERS_PER_CORE: 0.5
      # MAX_WORKERS: 8
    volumes:
      - ${DATA}/mealie:/app/data

  rss-bridge:
    image: rssbridge/rss-bridge:latest
    container_name: rss-bridge
    hostname: rss-bridge
    restart: unless-stopped
    volumes:
      - ${CONFIG}/rss-bridge:/config

  miniflux:
    image: miniflux/miniflux:latest
    container_name: miniflux
    hostname: miniflux
    restart: unless-stopped
    depends_on:
      - postgres
      - rss-bridge
    environment:
      - DATABASE_URL=postgresql://miniflux:miniflux@postgres/miniflux?sslmode=disable
      - BASE_URL=https://news.${DOMAIN}
      - RUN_MIGRATIONS=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=arvigeus
      - ADMIN_PASSWORD=StrongAndComplicatedPassword

  koel:
    image: hyzual/koel
    container_name: koel
    hostname: koel
    restart: unless-stopped
    depends_on:
      - postgres
    volumes:
      - ${MEDIA}/Music:/music
      - ${DATA}/koel/covers:/var/www/html/public/img/covers
      - ${DATA}/koel/search_index:/var/www/html/storage/search-indexes
      - ${DATA}/koel/.env:/var/www/html/.env
    environment:
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_USERNAME=koel
      - DB_PASSWORD=koel
      - DB_DATABASE=koel
      - FORCE_HTTPS=true
      - APP_KEY=${KOEL_APP_KEY}
      - LASTFM_API_KEY=${KOEL_LASTFM_API_KEY}
      - LASTFM_API_SECRET=${KOEL_LASTFM_API_SECRET}
      - YOUTUBE_API_KEY=${KOEL_YOUTUBE_API_KEY}

  wireguard:
    environment:
      # ⚠️ Required:
      # Change this to your host's public address
      - WG_HOST=vpn.${DOMAIN}
      # Optional:
      - PASSWORD=${PASSWORD}
      # - WG_PORT=51820
      # - WG_DEFAULT_ADDRESS=10.8.0.x
      # - WG_DEFAULT_DNS=1.1.1.1
      # - WG_ALLOWED_IPS=192.168.15.0/24, 10.0.1.0/24
    image: weejewel/wg-easy
    container_name: wireguard
    hostname: wireguard
    restart: unless-stopped
    volumes:
      - ${DATA}/wireguard:/etc/wireguard
    ports:
      - "51820:51820/udp"
      - "51821:51821/tcp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1

  linkding:
    image: sissbruecker/linkding:latest
    container_name: linkding
    hostname: linkding
    restart: unless-stopped
    volumes:
      - ${DATA}/linkding:/etc/linkding/data
    environment:
      - LD_DISABLE_BACKGROUND_TASKS=False
      - LD_DISABLE_URL_VALIDATION=False

  # dim:
  #   image: "vgarleanu/dim:latest"
  #   devices:
  #     - /dev/dri/card0
  #   container_name: dim
  #   hostname: dim
  #   restart: unless-stopped
  #   volumes:
  #     - ${DATA}/dim:/opt/dim/config
  #     - ${MEDIA}:/media

networks:
  default:
    external:
      name: $DOCKER_NETWORK
